#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

WiFiClient client;
HTTPClient http;

const char* ssid = "your-wifi-name";
const char* password = "your-wifi-password";
const char* serverName = "http://server-name:port"; //example - 192.168.0.100:8080
const char* handler = "/api/temperature";

const uint8_t spiderBitmap[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xec, 0x00, 0x00, 0x37, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe8, 0x00, 0x00, 0x1f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xf8, 0x00, 0x00, 0x1f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xd8, 0x00, 0x00, 0x1b, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xd8, 0x00, 0x00, 0x1b, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xd8, 0x00, 0x00, 0x1b, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xd8, 0x00, 0x00, 0x19, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xdf, 0xf1, 0x0f, 0xf9, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x8f, 0x1f, 0xf8, 0xf1, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xcf, 0xef, 0xf7, 0xfb, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xff, 0xf3, 0xcf, 0xff, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xfc, 0x30, 0x0c, 0x3f, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xc7, 0xe0, 0x07, 0xf3, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0xf0, 0x0f, 0xfe, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xfe, 0x00, 0x00, 0x7f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0xf0, 0x07, 0x3b, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfb, 0xe8, 0x17, 0xcc, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd8, 0x1b, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcf, 0xb8, 0x1c, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9e, 0x70, 0x0e, 0x7d, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7e, 0xf0, 0x0f, 0x3e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xf4, 0xf8, 0x0f, 0x2f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0xc4, 0x58, 0x0f, 0x23, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x84, 0x58, 0x1b, 0x21, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x04, 0x58, 0x1b, 0x20, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x06, 0x58, 0x1b, 0x20, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x06, 0xdc, 0x1b, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x06, 0xcc, 0x33, 0x20, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x06, 0xcc, 0x23, 0x20, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x06, 0xcc, 0x23, 0x20, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x06, 0xc6, 0x63, 0x20, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x06, 0xc6, 0x63, 0x60, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x06, 0xc3, 0xc3, 0x60, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x06, 0xc3, 0xc3, 0x60, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x06, 0xc0, 0x03, 0x60, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x06, 0xc0, 0x03, 0x60, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x06, 0xc0, 0x03, 0x60, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x06, 0x40, 0x03, 0x60, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x03, 0x40, 0x03, 0x40, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x03, 0x40, 0x03, 0x40, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x03, 0x40, 0x02, 0xc0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x03, 0x40, 0x02, 0xc0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x03, 0x40, 0x02, 0x80, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x03, 0x40, 0x06, 0x80, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xc0, 0x06, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xe0, 0x07, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x07, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0xf0, 0x0f, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0xf0, 0x0f, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xf0, 0x0f, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  Serial.begin(115200);

  // Инициализация дисплея
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("SSD1306 allocation failed");
    for (;;);
  }
  display.clearDisplay();

  // Подключение к Wi-Fi
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected to WiFi");
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("WiFi Connected!");
  display.display();
  delay(2000);
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    http.begin(client, serverName + String(handler));
    int httpCode = http.GET();

    if (httpCode == 200) {
      Serial.println("HTTP GET request successful");

      // Читаем ответ от сервера
      String payload = http.getString();
      Serial.println("Payload: " + payload);

      // Парсим JSON и обновляем дисплей
      mainParseTemperature(payload);
    } else {
      // Serial.println("Error on HTTP request: " + String(httpCode));
      // displayError("HTTP Error");
      displaySpiderManLogo();
    }

    http.end();
  } else {
    Serial.println("WiFi disconnected");
    displayError("WiFi Lost");
  }

  delay(10000);  // Задержка между запросами
}

void parseTemperature(const String& payload) {
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    Serial.println("JSON Parsing Error");
    displayError("JSON Error");
    return;
  }

  // Извлекаем температуру
  float cpuTemp = doc["cpu"];
  Serial.println("CPU: " + String(cpuTemp) + " C");
  float gpuTemp = doc["gpu"];
  Serial.println("GPU: " + String(gpuTemp) + " C");

  // Отображаем температуру на дисплее
  displayTemperature(cpuTemp, gpuTemp);
}

void mainParseTemperature(const String& payload) {
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    Serial.println("JSON Parsing Error");
    displayError("JSON Error");
    return;
  }

  // Извлекаем температуру
  int ui = doc["ui"];
  float cpuTemp = doc["cpu"];
  Serial.println("CPU: " + String(cpuTemp) + " C");
  float gpuTemp = doc["gpu"];
  Serial.println("GPU: " + String(gpuTemp) + " C");
  if (ui == 1) {
      displayTemperature(cpuTemp, gpuTemp);
  } else if (ui == 3) {
      displayGpuTemperature(gpuTemp);
  } else {
      displayTemperature(cpuTemp, gpuTemp);
  }

}

void parseGPUTemperature(const String& payload) {
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    Serial.println("JSON Parsing Error");
    displayError("JSON Error");
    return;
  }
  float gpuTemp = doc["gpu"];
  Serial.println("GPU: " + String(gpuTemp) + " C");

  displayGpuTemperature(gpuTemp);
}

void displayTemperature(float cpuTemp, float gpuTemp) {
  display.clearDisplay();

  int cpuTempInt = static_cast<int>(cpuTemp);
  int gpuTempInt = static_cast<int>(gpuTemp);

  display.setTextSize(2); // Размер шрифта для заголовка
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0); // Отображение сверху
  display.print("CPU:");

  display.setTextSize(3); // Увеличенный шрифт для значения температуры
  display.setCursor(50, 0);
  display.print(cpuTempInt); // Отображаем целое число
  display.print((char)247); // Символ ° (градус)
  display.print("C");

  // Разделительная линия
  display.drawLine(0, 32, 128, 32, SSD1306_WHITE); // Горизонтальная линия

  // GPU Section
  display.setTextSize(2); // Размер шрифта для заголовка
  display.setCursor(0, 40); // Размещаем текст ниже разделительной линии
  display.print("GPU:");

  display.setTextSize(3); // Увеличенный шрифт для значения температуры
  display.setCursor(50, 40);
  display.print(gpuTempInt); // Отображаем целое число
  display.print((char)247); // Символ ° (градус)
  display.print("C");

  // Отображаем всё на экране
  display.display();
}

void displayGpuTemperature(float gpuTemp) {
  display.clearDisplay();

  int gpuTempInt = static_cast<int>(gpuTemp);

  // Устанавливаем размер шрифта для температуры
  display.setTextSize(4); // Уменьшаем размер шрифта, чтобы текст поместился
  display.setTextColor(SSD1306_WHITE);

  // Центрируем текст по горизонтали и вертикали
  String temperature = String(gpuTempInt) + (char)247 + "C"; // Формируем строку температуры
  int textWidth = temperature.length() * 6 * 4;  // Ширина текста (6 пикселей на символ)
  int textHeight = 8 * 4; // Высота текста (2 строки по 8 пикселей)

  // Вычисляем положение для центрирования текста
  int xPos = (128 - textWidth) / 2;
  int yPos = (64 - textHeight) / 2;

  // Размещаем текст по центру
  display.setCursor(xPos, yPos);
  display.print(temperature);

  // Отображаем всё на экране
  display.display();
}

void displaySpiderManLogo() {
  display.clearDisplay();
  display.drawBitmap(0, 0, spiderBitmap, 128, 64, SSD1306_WHITE);
  display.display();
}

void displayError(const String& message) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.println("Error:");
  display.println(message);
  display.display();
}
